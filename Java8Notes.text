Java 8 Features

Lambda Expression - 
1.The expression through which we can express Anonymous Function.
	Anonymous : Nameless/Unknown function.
	Syntax --
	Parameter () Expression -> Body sysout(" ")
        call the method

2. Lambda funtion can be return only for functional interface, can write for other.

3. Functional interface -- Inteface with only one abstract method but multiple default method and static method.
	eg -	Runnable -- Run()
		Comparable --Compare to Method 

Consumer Functional Interface -
1. It is inbuilt function all in Java8, It is used when some operation has to perform on object without returning any result.
2. void accept(T t) //can take anytype of genericis.
3. It also contain default method.

Predicate Functional Interface -
1. It is use for conditional check.
2. It is use to check true or false condition.
3. Boolean test(T t)

Supplier Functional Interface -
1. It is use when there is not input but Return expected

T get();


Stream In Java 
1. It is used to process collection of object, it is a sequenDce of object that support various methods which can be piplined to produce desire result.
 Why Need - to achieve functional programming, Code  reduce, Bulk operations,
 	    it contain pipeline methods.
2. list.stream().filter(t->t.startsWith("R")).forEach(t->log.info(t));

filter method - 

Sorting of list ------>>>

1. it is used to filter with if else condition.

2. return getEmployee().stream().filter(employee -> employee.getSalary()==5000).collect(Collectors.toList());

Sorting of MAP -------->>>

Map -- One to one mapping.
flatMap() -- One to many mampping.

Data Transformation -- Stream of("a", "b", "c") -->Mapping --[A,B,C]-->Returning it as another string is known as Data Transformation

flattering --- {[1,2], [2,3], [4,5]} --->[1,2,3,4,5]--Convert stream into single stream.

List<String> phoneNumber=customers.stream().map(customer -> customer.getPhoneNumber()).collect(Collectors.toList());
        log.info(phoneNumber);

Optional in java --->> To avoid NullPointerException we use optional

Why Optional ?
class Customer {
int id ;
String name ;
// constructor
// Getter & Setter
}
class Test {
public static void main ( String [ ] args ) {
   Customer customer1 = new Customer ( 101 , " abc " ) ;
   customer1.getField ( ) -- > will give data
   Customer customer2 = new Customer ( 101 , null ) ;
   String name = customer2.getName ( ) -- > will give null
   // make uppercase
   ' name.toupperCasÃ©u : - > will give NullPointerException

Map and Reduce function 


Java Parallel Strem--It meant for utilizing mulitple coreje of processer.

Sequential Stream will use one core in multiple thread .
Parallel Stream will use multiple core for multiple thread.

